!obj:pylearn2.train.Train {
    dataset: &train %(train_data)s,

    model: %(model)s

    algorithm: !obj:training_algorithm.sgd_tailored.SgdTailored { # trainig algorithm: Batch Gradient Descent
        batch_size: 1,  # don't change if you want to use verbessert algo! POCHA
        combine_updates_rule: !obj:training_algorithm.combining_rules.Softmax {
        },
        learning_rate: 0.01,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.5,
            nesterov_momentum: 0.2
        },
        monitoring_dataset: {
            'valid':  %(validation_data)s,
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.cost.MethodCost {
                    method: 'cost_from_X'
                },
                !obj:pylearn2.costs.mlp.WeightDecay {
                    coeffs: {
                        %(weight_decay_coeffs)s
                    }
                }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_softmax_misclass",
                    prop_decrease: 0.50,
                    N: 10,
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 25 ,  # POCHA might be changed to sth that makes more sense
                },
            ]
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_softmax_misclass', # monitoring channel name
             save_path: %(pkl_filename)s # here the learned model will be stored
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: 0.99
        }, !obj:algorithm_extensions.symmetric_threshold.SymmetricThresholdWRTF1Score {
                save_best_model_path: "best_model_symmetric_threshold_wrt_F1Score.pkl"
        }, !obj:algorithm_extensions.statistics.StatisticsNoThreshold {
            call_list: [
                !obj:algorithm_extensions.no_threshold.F1Score {
                    save_best_model_path: "best_model_no_threshold_wrt_F1Score.pkl"
                }, !obj:algorithm_extensions.statistics.Precision { },
                !obj:algorithm_extensions.statistics.Recall { },
                !obj:algorithm_extensions.statistics.Accuracy { }
            ]
        }, !obj:algorithm_extensions.statistics.StatisticsSymmetricThreshold {
            call_list: [
                !obj:algorithm_extensions.statistics.Precision { },
                !obj:algorithm_extensions.statistics.Recall { },
                !obj:algorithm_extensions.statistics.Accuracy { }
            ]
         },!obj:algorithm_extensions.two_threshold.TwoThresholdWRTF1Score {
         }
    ]
}