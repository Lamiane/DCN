!obj:pylearn2.train.Train {
    dataset: &train %(train_data)s,

    model: !obj:pylearn2.models.mlp.MLP {
        layers: [ !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h0',
                     dim: 400,
                     sparse_init: 15
                 }, !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'softmax',
                     n_classes: 2,
                     irange: 0.
                 }
                ],
        nvis: 20844,
    },

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD { # trainig algorithm: Batch Gradient Descent
        batch_size: 1,  # don't change if you want to use verbessert algo! POCHA
        learning_rate: 0.01,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.5,
            nesterov_momentum: 0.2
        },
        monitoring_dataset: {
            'valid':  %(validation_data)s,
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.cost.MethodCost {
                    method: 'cost_from_X'
                },
                !obj:pylearn2.costs.mlp.L1WeightDecay {
                    coeffs: {
                       'h0': 0.00005,
                       'softmax': 0.00005,
                    }
                }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_softmax_misclass",
                    prop_decrease: 0.50,
                    N: 10,
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 25 ,  # POCHA might be changed to sth that makes more sense
                },
            ]
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_softmax_misclass', # monitoring channel name
             save_path: %(pkl_filename)s # here the learned model will be stored
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: 0.99
        }
    ]
}