!obj:pylearn2.train.Train {
    dataset: &train !obj:TwoDSift.twodsifts_dataset.TwoDSiftData {
        filenames: %(path)s
        y_val: [[1], [0]],
        cv: [5, [0, 1, 2, 3]],
        normal_run: True    # POCHA
    },

    model: %(model)s

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD { # trainig algorithm: Batch Gradient Descent
        batch_size: 1,  # why 1? POCHA
        learning_rate: 0.01,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.5,
            nesterov_momentum: 0.2
        },
        monitoring_dataset: {
            'valid':  !obj:TwoDSift.twodsifts_dataset.TwoDSiftData {
                        filenames: %(path)s
                        y_val: [[1], [0]],
                        cv: [5, [4]],
                        normal_run: True    # POCHA
                      }
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.cost.MethodCost {
                    method: 'cost_from_X'
                },
                !obj:pylearn2.costs.mlp.WeightDecay {
                    coeffs: {
                        %(weight_decay_coeffs)s
                    }
                }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_softmax_misclass",
                    prop_decrease: 0.50,
                    N: 10,
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 25 ,  # POCHA might be changed to sth that makes more sense
                },
            ]
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_softmax_misclass', # monitoring channel name
             save_path: %(pkl_filename)s # here the learned model will be stored
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: 0.99
        }, !obj:algorithm_extensions.statistics.StatisticsNoThreshold {
            call_list: [!obj:algorithm_extensions.no_threshold.F1Score,
                        !obj:algorithm_extensions.no_threshold.Precision,
                        !obj:algorithm_extensions.no_threshold.Recall,
                        !obj:algorithm_extensions.no_threshold.Accuracy
                      ]
        }, !obj:algorithm_extensions.statistics.StatisticsSymmetricThreshold {
            call_list: [!obj:algorithm_extensions.no_threshold.Precision,
                        !obj:algorithm_extensions.no_threshold.Recall,
                        !obj:algorithm_extensions.no_threshold.Accuracy
                      ]
         }
    ]
}
